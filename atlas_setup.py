#!/usr/bin/env python3
"""
LAN Security Monitor - MongoDB Atlas Setup
Helper script to configure MongoDB Atlas connection.
"""

import os
import json
import getpass
from urllib.parse import quote_plus

def print_banner():
    """Print setup banner"""
    banner = """
╔══════════════════════════════════════════════════════════════╗
║              MongoDB Atlas Setup for LanSecMon              ║
║                                                              ║
║  This script will help you configure MongoDB Atlas          ║
║  connection for your LAN Security Monitor.                  ║
╚══════════════════════════════════════════════════════════════╝
"""
    print(banner)

def get_atlas_credentials():
    """Get MongoDB Atlas credentials from user"""
    print("Please provide your MongoDB Atlas connection details:")
    print("(You can find these in your Atlas dashboard under 'Connect')")
    print()
    
    cluster_name = input("Enter your Atlas cluster name (e.g., cluster0): ").strip()
    if not cluster_name:
        cluster_name = "cluster0"
    
    username = input("Enter your Atlas username: ").strip()
    if not username:
        print("Username is required!")
        return None
    
    password = getpass.getpass("Enter your Atlas password: ").strip()
    if not password:
        print("Password is required!")
        return None
    
    database_name = input("Enter database name (default: lansecmon): ").strip()
    if not database_name:
        database_name = "lansecmon"
    
    return {
        'cluster_name': cluster_name,
        'username': username,
        'password': password,
        'database_name': database_name
    }

def create_connection_string(credentials):
    """Create MongoDB Atlas connection string"""
    # URL encode username and password to handle special characters
    username = quote_plus(credentials['username'])
    password = quote_plus(credentials['password'])
    cluster_name = credentials['cluster_name']
    database_name = credentials['database_name']
    
    connection_string = f"mongodb+srv://{username}:{password}@{cluster_name}.mongodb.net/{database_name}?retryWrites=true&w=majority"
    
    return connection_string

def test_connection(connection_string, database_name):
    """Test MongoDB Atlas connection"""
    try:
        from pymongo import MongoClient
        from pymongo.errors import ConnectionFailure, ServerSelectionTimeoutError
        
        print("Testing connection to MongoDB Atlas...")
        
        client = MongoClient(
            connection_string,
            serverSelectionTimeoutMS=10000,
            connectTimeoutMS=10000
        )
        
        # Test connection
        client.admin.command('ping')
        
        # Test database access
        db = client[database_name]
        test_collection = db.test_collection
        test_doc = {"test": "connection", "timestamp": "2024-01-01"}
        result = test_collection.insert_one(test_doc)
        
        # Clean up test document
        test_collection.delete_one({"_id": result.inserted_id})
        
        client.close()
        
        print("✅ Connection successful!")
        return True
        
    except ImportError:
        print("❌ PyMongo not installed. Install with: pip install pymongo dnspython")
        return False
    except (ConnectionFailure, ServerSelectionTimeoutError) as e:
        print(f"❌ Connection failed: {e}")
        print("\nTroubleshooting tips:")
        print("1. Check your username and password")
        print("2. Ensure your IP address is whitelisted in Atlas Network Access")
        print("3. Verify your cluster name is correct")
        print("4. Check if your cluster is running")
        return False
    except Exception as e:
        print(f"❌ Connection error: {e}")
        return False

def create_env_file(credentials, connection_string):
    """Create environment file with Atlas configuration"""
    env_content = f"""# MongoDB Atlas Configuration for LAN Security Monitor
# Generated by atlas_setup.py

# Database Type
DATABASE_TYPE=mongodb

# MongoDB Atlas Settings
MONGODB_CONNECTION_STRING={connection_string}
MONGODB_DATABASE_NAME={credentials['database_name']}
MONGODB_USERNAME={credentials['username']}
MONGODB_PASSWORD={credentials['password']}
MONGODB_CLUSTER_NAME={credentials['cluster_name']}

# Collection Settings
MONGODB_COLLECTION_PREFIX=lansecmon_

# Optional: Email alerts configuration
# EMAIL_ALERTS_ENABLED=true
# SMTP_SERVER=smtp.gmail.com
# SMTP_PORT=587
# FROM_EMAIL=your-email@example.com
# TO_EMAIL=admin@example.com
# SMTP_USERNAME=your-email@example.com
# SMTP_PASSWORD=your-app-password
"""
    
    with open('.env', 'w') as f:
        f.write(env_content)
    
    print("✅ Environment file created: .env")

def create_atlas_config():
    """Create Atlas configuration file"""
    print("Creating MongoDB Atlas configuration...")
    
    config_content = """# MongoDB Atlas Configuration for LAN Security Monitor

## Setup Instructions

1. **Create MongoDB Atlas Account**
   - Go to https://www.mongodb.com/atlas
   - Sign up for a free account
   - Create a new cluster (M0 free tier is sufficient for testing)

2. **Configure Network Access**
   - Go to Network Access in Atlas dashboard
   - Add your current IP address or use 0.0.0.0/0 for all IPs (less secure)

3. **Create Database User**
   - Go to Database Access in Atlas dashboard
   - Create a new user with read/write permissions
   - Note down the username and password

4. **Get Connection String**
   - Go to your cluster and click "Connect"
   - Choose "Connect your application"
   - Copy the connection string

5. **Run Atlas Setup**
   - Run: python atlas_setup.py
   - Enter your Atlas credentials when prompted

## Environment Variables

The following environment variables will be set:

- `DATABASE_TYPE=mongodb`
- `MONGODB_CONNECTION_STRING` - Your Atlas connection string
- `MONGODB_DATABASE_NAME` - Database name (default: lansecmon)
- `MONGODB_USERNAME` - Your Atlas username
- `MONGODB_PASSWORD` - Your Atlas password
- `MONGODB_CLUSTER_NAME` - Your cluster name

## Usage

After setup, the LAN Security Monitor will automatically use MongoDB Atlas:

```bash
# Run with Atlas database
python lansecmon.py scan --vulnerabilities

# Start web interface with Atlas
python lansecmon.py web

# Monitor with Atlas storage
python lansecmon.py monitor
```

## Benefits of MongoDB Atlas

- **Cloud-hosted**: No local database installation required
- **Scalable**: Automatically scales with your data
- **Reliable**: Built-in backup and recovery
- **Secure**: Enterprise-grade security features
- **Global**: Access from anywhere
- **Free Tier**: M0 cluster is free forever (512MB storage)

## Troubleshooting

1. **Connection Issues**
   - Check Network Access whitelist in Atlas
   - Verify username/password
   - Ensure cluster is running

2. **Authentication Errors**
   - Verify user has correct permissions
   - Check if user is created for correct database

3. **Timeout Errors**
   - Check internet connection
   - Verify cluster region is accessible
"""
    
    with open('ATLAS_SETUP.md', 'w') as f:
        f.write(config_content)
    
    print("✅ Atlas setup guide created: ATLAS_SETUP.md")

def update_config_for_atlas():
    """Update main config to use environment variables"""
    try:
        # Check if python-dotenv is available
        try:
            from dotenv import load_dotenv
            load_dotenv()
            print("✅ Environment variables will be loaded from .env file")
        except ImportError:
            print("⚠️  python-dotenv not installed. Install with: pip install python-dotenv")
            print("   Environment variables should be set manually or through system environment")
        
    except Exception as e:
        print(f"Warning: {e}")

def main():
    """Main setup function"""
    print_banner()
    
    print("This setup will help you configure MongoDB Atlas for LAN Security Monitor.")
    print("You'll need a MongoDB Atlas account and cluster.")
    print()
    
    choice = input("Do you want to proceed with Atlas setup? (y/N): ").strip().lower()
    if choice != 'y':
        print("Setup cancelled.")
        return
    
    # Create setup documentation
    create_atlas_config()
    
    print("\n" + "="*60)
    print("ATLAS CREDENTIALS SETUP")
    print("="*60)
    
    # Get credentials
    credentials = get_atlas_credentials()
    if not credentials:
        print("Setup failed. Please try again.")
        return
    
    # Create connection string
    connection_string = create_connection_string(credentials)
    
    print("\n" + "="*60)
    print("TESTING CONNECTION")
    print("="*60)
    
    # Test connection
    if not test_connection(connection_string, credentials['database_name']):
        print("\nConnection test failed. Please check your credentials and try again.")
        return
    
    print("\n" + "="*60)
    print("CREATING CONFIGURATION")
    print("="*60)
    
    # Create environment file
    create_env_file(credentials, connection_string)
    
    # Update config
    update_config_for_atlas()
    
    print("\n" + "="*60)
    print("SETUP COMPLETE!")
    print("="*60)
    
    print("""
🎉 MongoDB Atlas setup completed successfully!

Next steps:
1. Install python-dotenv: pip install python-dotenv
2. Test the connection: python mongodb_manager.py
3. Run a scan: python lansecmon.py scan --vulnerabilities
4. Start web interface: python lansecmon.py web

Your data will now be stored in MongoDB Atlas cloud database.

Configuration files created:
- .env (Atlas credentials)
- ATLAS_SETUP.md (Setup documentation)

Security note: Keep your .env file secure and don't commit it to version control!
""")

if __name__ == "__main__":
    main()
