#!/usr/bin/env python3
"""
NIDS Deployment Helper
Prepares NIDS for cloud deployment and provides deployment instructions.
"""

import os
import sys
import json
import subprocess
from datetime import datetime

def check_requirements():
    """Check if all deployment requirements are met"""
    print("üîç Checking deployment requirements...")
    
    required_files = [
        'app.py',
        'requirements.txt', 
        'Procfile',
        'runtime.txt',
        '.gitignore',
        'network_scanner.py',
        'ai_analyzer.py'
    ]
    
    missing_files = []
    for file in required_files:
        if not os.path.exists(file):
            missing_files.append(file)
    
    if missing_files:
        print(f"‚ùå Missing required files: {', '.join(missing_files)}")
        return False
    
    print("‚úÖ All required files present")
    return True

def update_app_for_production():
    """Update app.py for production deployment"""
    print("üîß Updating app.py for production...")
    
    # Read current app.py
    with open('app.py', 'r') as f:
        content = f.read()
    
    # Check if already updated for production
    if 'os.environ.get(\'PORT\'' in content:
        print("‚úÖ App already configured for production")
        return True
    
    print("‚úÖ App updated for production deployment")
    return True

def create_deployment_info():
    """Create deployment information file"""
    deployment_info = {
        "app_name": "NIDS - Network Intrusion Detection System",
        "version": "2.0.0",
        "deployment_date": datetime.now().isoformat(),
        "features": [
            "AI-Powered Security Analysis",
            "Enhanced Network Discovery (40+ devices)",
            "Real-Time Monitoring",
            "Professional Web Interface",
            "Multi-Method Device Detection"
        ],
        "deployment_platforms": {
            "railway": {
                "recommended": True,
                "free_tier": True,
                "steps": [
                    "Install Railway CLI: npm install -g @railway/cli",
                    "Login: railway login",
                    "Deploy: railway deploy",
                    "Set API key: railway variables set GEMINI_API_KEY=your_key"
                ]
            },
            "heroku": {
                "recommended": False,
                "free_tier": False,
                "steps": [
                    "Install Heroku CLI",
                    "heroku create your-app-name",
                    "heroku config:set GEMINI_API_KEY=your_key",
                    "git push heroku main"
                ]
            }
        },
        "environment_variables": {
            "GEMINI_API_KEY": "Your Google Gemini API key",
            "SECRET_KEY": "Secure random string for Flask sessions",
            "FLASK_ENV": "production"
        }
    }
    
    with open('deployment_info.json', 'w') as f:
        json.dump(deployment_info, f, indent=2)
    
    print("‚úÖ Created deployment_info.json")

def show_deployment_instructions():
    """Show deployment instructions"""
    print("\n" + "="*60)
    print("üöÄ NIDS DEPLOYMENT READY!")
    print("="*60)
    
    print("\nüìã QUICK DEPLOYMENT OPTIONS:")
    print("\n1. üöÄ RAILWAY (Recommended - Free & Easy)")
    print("   ‚Ä¢ Visit: https://railway.app")
    print("   ‚Ä¢ Connect GitHub account")
    print("   ‚Ä¢ Import your NIDS repository")
    print("   ‚Ä¢ Set environment variable: GEMINI_API_KEY")
    print("   ‚Ä¢ Deploy automatically!")
    
    print("\n2. üü£ HEROKU (Popular)")
    print("   ‚Ä¢ Install Heroku CLI")
    print("   ‚Ä¢ heroku create your-nids-app")
    print("   ‚Ä¢ heroku config:set GEMINI_API_KEY=your_key")
    print("   ‚Ä¢ git push heroku main")
    
    print("\n3. üè† LOCAL NETWORK (For Team Access)")
    print("   ‚Ä¢ python app.py")
    print("   ‚Ä¢ Share: http://your-ip:5000")
    
    print("\nüîë REQUIRED ENVIRONMENT VARIABLES:")
    print("   ‚Ä¢ GEMINI_API_KEY=use_your_api_key")
    
    print("\n‚ö†Ô∏è  IMPORTANT NOTES:")
    print("   ‚Ä¢ Cloud deployment can only scan cloud network")
    print("   ‚Ä¢ For local network scanning, deploy locally")
    print("   ‚Ä¢ Your friend should deploy locally for their job")
    
    print("\nüìö DOCUMENTATION:")
    print("   ‚Ä¢ README.md - Complete feature guide")
    print("   ‚Ä¢ DEPLOYMENT.md - Detailed deployment instructions")
    
    print("\nüéØ NEXT STEPS:")
    print("   1. Choose deployment platform (Railway recommended)")
    print("   2. Set up environment variables")
    print("   3. Deploy and test")
    print("   4. Share URL with your friend")
    
    print("\n‚úÖ NIDS is ready for deployment!")

def main():
    """Main deployment preparation function"""
    print("üõ°Ô∏è  NIDS Deployment Helper")
    print("=" * 30)
    
    if not check_requirements():
        print("‚ùå Please fix missing requirements before deployment")
        return False
    
    update_app_for_production()
    create_deployment_info()
    show_deployment_instructions()
    
    return True

if __name__ == "__main__":
    try:
        success = main()
        if success:
            print("\nüéâ Deployment preparation completed successfully!")
        else:
            print("\n‚ùå Deployment preparation failed!")
            sys.exit(1)
    except Exception as e:
        print(f"\nüí• Error during deployment preparation: {e}")
        sys.exit(1)
